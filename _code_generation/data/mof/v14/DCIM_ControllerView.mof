// Copyright (c) 2010 Dell Inc.  All rights reserved.
// ==================================================================
// DCIM_controllerView
// ==================================================================

      [Description(
           "DCIM_ControllerView is a derivation of DCIM_View "
           "with controller specific data.") ]
class DCIM_ControllerView : DCIM_View {

      [Key, Description (
          "A string containing the Fully Qualified Device Description "
          "A user-friendly name for the object. This property allows each "
          "instance to define a user-friendly name in addition to its key "
          "properties, identity data, and description information. "
          )]
  string InstanceID;

      [Description (
          "A string containing the Fully Qualified Device Description "
          "A user-friendly name for the object. This property allows each "
          " instance to define a user-friendly name in addition to its key "
          " properties, identity data, and description information. "
          )]
  string FQDD;   

      [Description (
          "PrimaryStatus provides a high level status value, intended to "
          "align with Red-Yellow-Green type representation of status. "
          "It should be used to "
          "provide high level and detailed health status of the "
          "controller and its subcomponents. PrimaryStatus consists "
          "of one of the following values: Unknown, OK, Degraded or Error. "
          "\"Unknown\" indicates the implementation is in general capable "
          "of returning this property, but is unable to do so at this time. "
          "\"OK\" indicates the controller is functioning normally. "
          "\"Degraded\" indicates the controller is functioning below "
          "normal. \"Error\" indicates the controller is in an Error "
          " condition. " ),
       ValueMap { "0", "1", "2", "3", "0x8000", "0xFFFF" },
       Values { "Unknown", "OK", "Degraded", "Error",
               "DMTF Reserved", "Vendor Reserved" }]
  uint32 PrimaryStatus;

      [Description (
          "This uniquely identifies the embedded PCI Slot "
          "number of the Controller ")]
  uint8 PCISlot;

      [Description (
          "This property gives information about the "
          "Firmware Version installed on the Controller ")]
  string ControllerFirmwareVersion; 

      [Description (
          " PCI bus ")]
  string Bus;

      [Description (
          " PCI device")]
  string Device;

      [Description (
          " PCI function ")]
  string Function;

      [Description (
          "This property is the Controller Vendor ID ")]
  string PCIVendorID;

      [Description (
          " This property is the Controller Sub Vendor ID ")]
  string PCISubVendorID;

      [Description (
          "This property is the Controller Device ID ")]
  string PCIDeviceID;

      [Description (
          "This property is the Controller Sub Device ID ")]
  string PCISubDeviceID;

      [Description (
          "This property is the Controller Manufacturer Name ")]
  string DeviceCardManufacturer;

      [Description (
          "DeviceCardSlotLength gives information about the Controller "
          "bus width. This property can have following values: \" Unknown\", "
          "\"8x\" "),
       ValueMap{"0" , "1"},
       Values{"Unknown", "8x"}]
  uint8 DeviceCardDataBusWidth;

      [Description (
          "DeviceCardSlotLength gives information about the Controller "
          "slot length. This property can have following values \"Short\" "
          "\"Long\" " ),
       ValueMap{"0x03","0x04"},
       Values{"Short", "Long"}]
  uint8 DeviceCardSlotLength;

      [Description (
          "DeviceCardSlotType gives information about the Controller "
          "Controller Slot type. The slot type has following values "
          "\"Unknown\", \"PCI Express x8\" ")]
  string DeviceCardSlotType;

      [Description (
          "Product Name property specifies the Name "
          "of the Controller. " )]
  string ProductName;

      [Description (
          "The SASAddress property provides a unique Controller Name." )]
  string SASAddress;

      [Description (
          "RollupStatus provides a high level status value, intended to align "
          "with Red-Yellow-Green type representation of status. It should be "
          "used to provide high level and "
          " detailed health status of the controller and its "
          "subcomponents. RollupStatus consists of one of the following "
          "values: Unknown, OK, Degraded or Error. \"Unknown\" indicates the "
          "implementation is in general capable of returning this property, "
          "but is unable to do so at this time. \"OK\" indicates the "
          "controller is functioning normally. \"Degraded\" indicates the "
          "controller is functioning below normal. \"Error\" indicates "
          "the controller is in an Error condition. " ),
       ValueMap { "0", "1", "2", "3", "0x8000", "0xFFFF" },
       Values { "Unknown", "OK", "Degraded", "Error",
               "DMTF Reserved", "Vendor Reserved" }]
  uint32 RollupStatus;

      [Description (
          "Security Status property security configuration information "
          "of the Controller." ),
       ValueMap {"0", "1", "2"},
       Values{"Unknown", "Encryption Capable", "Security Key Assigned"}]
  uint32 SecurityStatus;
};
